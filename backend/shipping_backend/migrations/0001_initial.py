# Generated by Django 3.1.3 on 2020-12-06 18:23

from django.conf import settings
import django.contrib.auth.validators
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'individual'), (2, 'broker'), (3, 'commercial'), (4, 'registrar'), (5, 'admin')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pricing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ship_type', models.CharField(max_length=100)),
                ('tonnage', models.BigIntegerField()),
                ('is_new_ship', models.BooleanField()),
                ('is_motor_change', models.BooleanField()),
                ('is_extend_ship', models.BooleanField()),
                ('is_reg_renewal', models.BooleanField()),
                ('is_change_owner', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Vessel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ship_name', models.CharField(max_length=100)),
                ('ship_type', models.PositiveSmallIntegerField(choices=[(1, 'private'), (2, 'commercial')])),
                ('length', models.IntegerField()),
                ('hull_id', models.CharField(max_length=12)),
                ('num_hull', models.PositiveSmallIntegerField()),
                ('prop_method', models.PositiveSmallIntegerField(choices=[(1, 'Sail'), (2, 'Non-propelled'), (3, 'Steam'), (4, 'Motor'), (5, 'Propellor'), (6, 'Pumpjet'), (7, 'Voith-Schneider Cyclo-Rotor'), (8, 'Paddle Wheel'), (9, 'Caterpillar')])),
                ('joint_owners', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=3), size=50)),
                ('was_deleted', models.BooleanField()),
                ('personal_vessel_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Barge'), (2, 'Dinghy'), (3, 'Hovercraft'), (4, 'Inflatable'), (5, 'Motor Sailer'), (6, 'Motor Yacht'), (7, 'Narrow Boat'), (8, 'Sailing Yacht'), (9, 'Sports Yacht'), (10, 'Wet Bike')], null=True)),
                ('personal_model', models.CharField(blank=True, max_length=100, null=True)),
                ('port', models.PositiveSmallIntegerField(choices=[(1, 'Whitby Harbour'), (2, 'Point Newcastle'), (3, "Robin Hood's Bay"), (4, 'Victoria')])),
                ('tonnage', models.BigIntegerField(blank=True, null=True)),
                ('imo_num', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('width', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('depth', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('commer_type', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=3)),
                ('mmsi', models.CharField(blank=True, max_length=100, null=True)),
                ('call_sign', models.CharField(blank=True, max_length=100, null=True)),
                ('prop_power', models.IntegerField(blank=True, null=True)),
                ('num_engine', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('engine_details', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), size=2), blank=True, null=True, size=50)),
                ('builder_name', models.CharField(blank=True, max_length=100, null=True)),
                ('builder_addr', models.CharField(blank=True, max_length=100, null=True)),
                ('builder_yard_no', models.IntegerField(blank=True, null=True)),
                ('date_created', models.DateField(auto_now_add=True, null=True)),
                ('build_date', models.DateField(blank=True, null=True)),
                ('keel_date', models.DateField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Surveyor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('api_key', models.CharField(max_length=100, unique=True)),
                ('vessels_list', models.ManyToManyField(to='shipping_backend.Vessel')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_applied', models.DateField(auto_now_add=True)),
                ('date_approved', models.DateField(auto_now_add=True)),
                ('reg_state', django_fsm.FSMField(choices=[('unregistered_vessel', 'unregistered_vessel'), ('app_fee_pending', 'app_fee_pending'), ('reg_fee_pending', 'reg_fee_pending'), ('pending_reg_approval', 'pending_reg_approval'), ('reg_approved', 'reg_approved'), ('reg_rejected', 'reg_rejected'), ('reg_completed', 'reg_completed')], default='unregistered_vessel', max_length=50)),
                ('registration_info', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shipping_backend.vessel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Registrar',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='registrar_profile', serialize=False, to='shipping_backend.user')),
                ('pending_vessels', models.ManyToManyField(blank=True, null=True, related_name='registrar_pending', to='shipping_backend.Vessel')),
                ('reviewed_vessels', models.ManyToManyField(blank=True, null=True, related_name='registrar_reviewed', to='shipping_backend.Vessel')),
            ],
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='individual_profile', serialize=False, to='shipping_backend.user')),
                ('eligibility', models.PositiveSmallIntegerField(choices=[(1, 'UK Citizen'), (2, 'British Dependent Territories Citizen'), (3, 'British Overseas Citizen'), (4, 'Commonwealth Citizen'), (5, 'Non-UK National settled in UK'), (6, 'Citizen of EU Member State Under Articles 48 or 52')])),
                ('mailing_addr', models.CharField(blank=True, max_length=100)),
                ('phone_nbr', models.CharField(blank=True, max_length=20)),
                ('vessels_list', models.ManyToManyField(to='shipping_backend.Vessel')),
            ],
        ),
        migrations.CreateModel(
            name='Commercial',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='commercial_profile', serialize=False, to='shipping_backend.user')),
                ('eligibility', models.PositiveSmallIntegerField(choices=[(1, 'Company Incorporated in Navis Album'), (2, 'Company Incorporated in any British Dependent Territory'), (3, 'Company Incorporated in EEA Country'), (4, 'Company Incorporated in any British Overseas Possession'), (5, 'Company Incorporated in EEIG'), (6, 'Company Incorporated in Commonwealth State')])),
                ('tonnage', models.BigIntegerField(default=0)),
                ('vessels_list', models.ManyToManyField(to='shipping_backend.Vessel')),
            ],
        ),
        migrations.CreateModel(
            name='Broker',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='broker_profile', serialize=False, to='shipping_backend.user')),
                ('client_list', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100, null=True), size=2), blank=True, null=True, size=500)),
                ('vessels_list', models.ManyToManyField(to='shipping_backend.Vessel')),
            ],
        ),
    ]
